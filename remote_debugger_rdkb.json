{
    "DebugCategory": {
        "DebugIssueType": {
            "DebugCommands": "command1;command2;commmand3",
            "DebugTimeout" : 10
        }
    },
    "Sanity": {
        "Check" : {
            "Commands" : [ "rm -rf ", "kill ", "pkill ", "iptables ", "ip6tables " ]
        }
    },
   "Wifi" : {
       "SSIDStatus" : {
            "Commands": "echo \"2.4G SSID status\";dmcli eRT getv Device.WiFi.SSID.1.Status | grep value;echo \"5G SSID status\";dmcli eRT getv Device.WiFi.SSID.2.Status | grep value",
            "Timeout" : 10
       },
       "RadioStatus" : {
            "Commands": "echo \"2.4G Radio status\";dmcli eRT getv Device.WiFi.Radio.1.Status | grep value;echo \"5G Radio status\";dmcli eRT getv Device.WiFi.Radio.2.Status | grep value",
            "Timeout" : 10
       },
       "RadioConfig" : {
            "Commands": "ovsh s Wifi_Radio_Config -c -d wifi",
            "Timeout" : 10
       },
       "BandStatus" : {
            "Commands": "echo \"2G RadioBandUtilization\";dmcli eRT getv Device.WiFi.Radio.1.Stats.X_COMCAST-COM_ChannelUtilization | grep value;echo \"5G RadioBandUtilization\";dmcli eRT getv Device.WiFi.Radio.2.Stats.X_COMCAST-COM_ChannelUtilization | grep value",
            "Timeout" : 10
       },
       "Association" : {
            "Commands": "echo \"2G Clients Count\";dmcli eRT getv Device.WiFi.AccessPoint.1.AssociatedDeviceNumberOfEntries | grep value;echo \"5G clients count\";dmcli eRT getv Device.WiFi.AccessPoint.2.AssociatedDeviceNumberOfEntries | grep value",
            "Timeout" : 10
       },
       "RFCConfig" : {
            "Commands": "ovsh s Wifi_Rfc_Config -c -d wifi",
            "Timeout" : 10
       },
       "MacFilter" : {
            "Commands": "ovsh s Wifi_MacFilter_Config -c -d wifi",
            "Timeout" : 10
       },
       "SecurityConfig" : {
            "Commands": "ovsh s Wifi_Security_Config -c -d wifi",
            "Timeout" : 10
       },
       "VAPStatus" : {
            "Commands": "ovsh s Wifi_VAP_Config -c -d wifi",
            "Timeout" : 10
       },
       "DFSStatus" : {
            "Commands": "dmcli eRT getv Device.WiFi.Radio.2.X_COMCAST_COM_DFSEnable | grep value;dmcli eRT getv Device.WiFi.Radio.1.X_COMCAST_COM_DFSEnable | grep value",
            "Timeout" : 10
       },
       "InterworkingStatus" : {
            "Commands": "dmcli eRT getv Device.DeviceInfo.X_RDKCENTRAL-COM_RFC.Feature.WiFi-Interworking.Enable| grep -s -i value",
            "Timeout" : 10
       },
       "PasspointStatus" : {
            "Commands": "dmcli eRT getv Device.DeviceInfo.X_RDKCENTRAL-COM_RFC.Feature.WiFi-Passpoint.Enable| grep -s -i value",
            "Timeout" : 10
       }
    },
   "Ethernet" : {
       "LinkStatus" : {
            "Commands": "ifconfig eth0;ethtool eth0;ifconfig eth1;ethtool eth1;ifconfig eth2;ethtool eth2;ifconfig eth3;ethtool eth3",
            "Timeout" : 10
       },
       "Association" : {
            "Commands": "eth_api CcspHalExtSw_getAssociatedDevice",
            "Timeout" : 10
       },
       "DriverStats" : {
            "Commands": "dmcli eRT getv Device.Ethernet.Interface.",
            "Timeout" : 30
       }
    },
   "System" : {
       "CPUStats" : {
            "Commands": "echo \"mpstat output:\";mpstat 1 5; top -n 1",
            "Timeout" : 20
       },
       "MemoryStats" : {
            "Commands": "echo \"Mem stats:\";cat /proc/meminfo; echo \"Mem Fragmentation stats:\"; cat /proc/buddyinfo",
            "Timeout" : 10
       },
       "LoadAverage" : {
            "Commands": "echo \"Load Avg\";cat /proc/loadavg",
            "Timeout" : 10
       },
       "Interrupts" : {
            "Commands": "echo \"Soft IRQ\";cat /proc/softirqs; echo \"Interrupts\";cat /proc/interrupts",
            "Timeout" : 10
       },
       "DiskSpace" : {
            "Commands": "echo \"nvram and tmp partition\"; df /nvram* /tmp;",
            "Timeout" : 20
       },
       "FileDescriptor" : {
            "Commands": "cd /proc; ls | awk '{if($1 ~ /^[0-9]+$/) { printf \"%-7s: \",$1; system(\"ls \"$1\"/fd/ | wc -l\") } }' 2>/dev/null | sort -t ':' -b -n -r -k2 | awk 'BEGIN{printf\"\n%4s%-13s%-7s #FD\n\n\",\"\",\"Process\",\"PID\";} {cmd=\"cat \"$1\"/comm\"; cmd | getline tp; printf \"%-17s%-7s : %s\n\",tp,$1,$3;}'",
            "Timeout" : 30
       },
       "ServiceStatus" : {
            "Commands": "systemctl status",
            "Timeout" : 10
       },
       "TotalMemory" : {
            "Commands": "dmcli eRT getv Device.DeviceInfo.MemoryStatus.Total | grep -s -i value",
            "Timeout" : 10
       },
       "MemoryUsed" : {
            "Commands": "dmcli eRT getv Device.DeviceInfo.MemoryStatus.Used | grep -s -i value",
            "Timeout" : 10
       },
       "MemoryFree" : {
            "Commands": "dmcli eRT getv Device.DeviceInfo.MemoryStatus.Free | grep -s -i value",
            "Timeout" : 10
       }
    },
    "Network": {
        "DNSCheck": {
            "Commands": "echo \"Displaying netstat output for all dnsmasq process related connections\";/bin/netstat -natp | egrep \"Recv-Q|dnsmasq\"",
            "Timeout" : 10
        },
        "DDOSCheck": {
            "Commands": "echo \"iptables wanattack stats \";iptables -L wanattack -v;echo \"iptables wandosattack stats \";iptables -L wandosattack -v;echo \"iptables lanattack stats \";iptables -L lanattack -v",
            "Timeout" : 10
        },
        "BlockedDevice": {
            "Commands": "count=$(iptables -L -n -v | egrep -i \"LOG_DeviceBlocked|LOG_SiteBlocked|LOG_ServiceBlocked\" | wc -l) && [ \"$count\" -gt 0 ] && echo \"$WARN_PREFIX: One or more clients are in Paused/BedTime state as of now\" || echo \"$PASS_PREFIX No devices are in Paused/BedTime state\"; iptables -L -n -v | egrep -i \"LOG_DeviceBlocked|LOG_SiteBlocked|LOG_ServiceBlocked\"",
            "Timeout" : 10
        },
        "ConntrackCheck": {
            "Commands": "tot=$(cat /proc/net/nf_conntrack | wc -l); if [[ \"$tot\" -gt 1000 ]]; then echo \"XDT-Warning: nf_conntrack entries more than 1000\"; else echo \"XDT-Success: nf_conntrack entries less than 1000\"; fi;echo \"Total entries in nf_conntrack\";cat /proc/net/nf_conntrack | wc -l ;echo \"Count of SYN_SENT connections\"; grep -ic \"SYN_SENT\" /proc/net/nf_conntrack;echo \"Count of UNREPLIED connections\"; grep -ic \"UNREPLIED\" /proc/net/nf_conntrack",
            "Timeout" : 10
        },
        "RoutingTable": {
            "Commands": "{failed_ifaces=\"\"; for iface in brlan0 erouter0 brlan1 wan0 privbr br106 br403 ; do ip link show \"$iface\" | grep -q \"UP\" || failed_ifaces=\"${failed_ifaces} ${iface}\"; done; [ -z \"$failed_ifaces\" ] && echo \"XDT-Success: route table interfaces check passed\" || echo \"XDT-Warning: route table interface check failed for:${failed_ifaces}\"; } ; ip route show | grep -q \"^default\" && echo \"XDT-Success: Default Route is present\" || echo \"XDT-Warning: Default Route is not present\"",
            "Timeout" : 10
        },
        "OVSConfig": {
            "Commands": "echo \"Is OVS enabled?\"; syscfg get mesh_ovs_enable;echo \"Dump bridge configuration - ovs-vsctl show\";ovs-vsctl show",
            "Timeout" : 10
        }
    },
    "LAN": {
        "Mode": {
            "Commands": "dmcli eRT getv Device.X_CISCO_COM_DeviceControl.LanManagementEntry.1.LanMode | grep value",
            "Timeout" : 10
        },
        "Operation": {
            "Commands": "dmcli eRT getv Device.X_RDKCENTRAL-COM_EthernetWAN.SelectedOperationalMode | grep value",
            "Timeout" : 10
        },
        "Config": {
            "Commands": "ifconfig brlan0; ifconfig brlan1",
            "Timeout" : 10
        },
        "Packetcapture": {
            "Commands": "nohup tcpdump -G 30 -i brlan0 -vvv -s 0 -ttt -w RRD_LOCATION/filename_lan.pcap -W 1 > /dev/null 2>&1 &",
            "Timeout" : 35
        }
    },
    "WAN": {
        "ErouterStatus": {
            "Commands": "ip addr show erouter0",
            "Timeout" : 10
        },
        "DNSCheck": {
            "Commands": "cat /etc/resolv.conf; /usr/bin/nslookup google.com",
            "Timeout" : 10
        },
        "WANStatus": {
            "Commands": "echo \"Ethwan link status\";dmcli eRT getv Device.X_RDKCENTRAL-COM_EthernetWAN.LinkStatus;echo \"Ethwan parameters dump\";dmcli eRT getv Device.X_RDKCENTRAL-COM_EthernetWAN.",
            "Timeout" : 10
        },
        "PingTest": {
            "Commands": "ping6 -c 10 -w 12 google.com;ping -c 10 -w 12 google.com",
            "Timeout" : 10
        },
        "IperfTest": {
            "Commands": "echo \"Bootfile Name:\";dmcli eRT getv Device.X_CISCO_COM_CableModem.IPv6BootFileName | egrep -i \"Parameter|value:\" ; echo \"Provisioned Download Speed:\";dmcli eRT getv Device.X_CISCO_COM_CableModem.DOCSISDownstreamDataRate | egrep -i \"Parameter|value:\" ;echo \"Running iperf test to measure current Gateway WAN Speed\";echo \"Please manually run the below command to trigger Iperf Speed test to measure WAN speeds\"; echo \"iperf3 --client 69.241.68.142 --port 55514 --parallel 6 --omit 3 --time 30 --reverse\"",
            "Timeout" : 10
        },
        "LeaseTime": {
            "Commands": "dmcli eRT getv Device.X_CISCO_COM_CableModem.IPv6LeaseTimeRemaining | grep value;dmcli eRT getv Device.X_CISCO_COM_CableModem.IPv6RenewTimeRemaining | grep value",
            "Timeout" : 10
        },
        "DSUSChannel": {
            "Commands": "dmcli eRT getv Device.X_CISCO_COM_CableModem.DownstreamChannelNumberOfEntries | grep value;dmcli eRT getv Device.X_CISCO_COM_CableModem.UpstreamChannelNumberOfEntries | grep value",
            "Timeout" : 10
        },
        "PacketCapture": {
            "Commands": "nohup tcpdump -G 30 -i erouter0 -vvv -s 0 -ttt -w RRD_LOCATION/erouter0.pcap -W 1 > /dev/null 2>&1 &",
            "Timeout" : 35
        }
    },
    "Device": {
        "Version": {
            "Commands": "cat /version.txt;/usr/bin/uptime",
            "Timeout" : 10
        },
        "BootFile": {
            "Commands": "dmcli eRT getv Device.X_CISCO_COM_CableModem.BootFileName | grep value",
            "Timeout" : 10
        },
        "ProvisionSpeed": {
            "Commands": "dmcli eRT getv Device.X_CISCO_COM_CableModem.DOCSISDownstreamDataRate | grep value;dmcli eRT getv Device.X_CISCO_COM_CableModem.DOCSISUpstreamDataRate | grep value",
            "Timeout" : 10
        },
        "WifiProvision": {
            "Commands": "dmcli eRT getv Device.DeviceInfo.X_RDKCENTRAL-COM_WiFiNeedsPersonalization | grep value;dmcli eRT getv Device.DeviceInfo.X_RDKCENTRAL-COM_ConfigureWiFi | grep value",
            "Timeout" : 10
        },
        "RebootReason": {
            "Commands": "dmcli eRT getv Device.DeviceInfo.X_RDKCENTRAL-COM_LastRebootReason | grep value",
            "Timeout" : 10
        },
        "ApparmorBlocklist": {
            "Commands": "dmcli eRT getv Device.DeviceInfo.X_RDKCENTRAL-COM_RFC.Feature.NonRootSupport.ApparmorBlocklist | grep value",
            "Timeout" : 10
        },
        "ModelName": {
            "Commands": "dmcli eRT getv Device.DeviceInfo.ModelName | grep -s -i value",
            "Timeout" : 10
        },
        "Manufacture": {
            "Commands": "dmcli eRT getv Device.DeviceInfo.Manufacturer | grep -s -i value",
            "Timeout" : 10
        },
        "HardwareVersion": {
            "Commands": "dmcli eRT getv Device.DeviceInfo.Manufacturer | grep -s -i value",
            "Timeout" : 10
        },
        "SerialNumber": {
            "Commands": "dmcli eRT getv Device.DeviceInfo.SerialNumber | grep -s -i value",
            "Timeout" : 10
        },
        "ProcessorSpeed": {
            "Commands": "dmcli eRT getv Device.DeviceInfo.X_CISCO_COM_ProcessorSpeed | grep -s -i value",
            "Timeout" : 10
        },
        "PartnerID": {
            "Commands": "dmcli eRT getv Device.DeviceInfo.X_RDKCENTRAL-COM_Syndication.PartnerId | grep -s -i value",
            "Timeout" : 10
        },
        "RBUSStatus": {
            "Commands": "dmcli eRT getv Device.DeviceInfo.X_RDKCENTRAL-COM_RFC.Feature.RBUS.Enable  | grep -s -i value",
            "Timeout" : 10
        },
        "TimeStatus": {
            "Commands": "dmcli eRT getv Device.Time.Enable | grep -s -i value;dmcli eRT getv Device.Time.Status| grep -s -i value",
            "Timeout" : 10
        },
        "NTPServer": {
            "Commands": "dmcli eRT getv Device.Time.NTPServer1 | grep -s -i value;dmcli eRT getv Device.Time.NTPServer2 | grep -s -i value",
            "Timeout" : 10
        },
        "TimeInfo": {
            "Commands": "dmcli eRT getv Device.Time.CurrentLocalTime | grep -s -i value;dmcli eRT getv Device.Time.LocalTimeZone | grep -s -i value",
            "Timeout" : 10
        }
    },
    "Process": {
        "Status": {
            "Commands": "top n1",
            "Timeout" : 10
        },
         "ZombieState": {
             "Commands": "echo \"Checking for processes in a bad state (Zombie or Uninterruptible sleep)\" && ps | grep -E ' [DZ] ';DZ_Count=`ps | grep -E ' [DZ] ' | grep -v grep | wc -l`;if [[ 0 -eq \"$DZ_Count\" ]];then echo \"$PASS_PREFIX No processes in D state or Zombie State\"; else echo \"$WARN_PREFIX Processes found in D State or Zombie state\";fi;",
             "Timeout" : 10
        },
        "MemoryStatus": {
            "Commands": "top -m n1",
            "Timeout" : 10
        },
        "CoreDump": {
            "Commands": "ls -lhrt /tmp/*core.*",
            "Timeout" : 10
        },
        "MiniDump": {
            "Commands": "ls -lhrt /minidumps/*.dmp*",
            "Timeout" : 10
        }
   },
    "Power": {
        "DeviceTemperature": {
            "Commands": "echo \"CM temperature \";cat /tmp/thermal_cm; echo \"2G WiFi PCIE temperature\";cat /tmp/thermal_wifi;echo \"5G WiFi PCIE temperature\";cat /tmp/thermal_wifi_5g;echo \"6G WiFi PCIE temperature\";cat /tmp/thermal_wifi_6g",
            "Timeout" : 10
        },
        "Battery": {
            "Commands": "dmcli eRT getv Device.DeviceInfo.X_RDKCENTRAL-COM_batteryBackup. | egrep -i \"parameter|value\"",
            "Timeout" : 10
        }
    },
    "MESH": {
        "Status": {
            "Commands": "dmcli eRT getv Device.DeviceInfo.X_RDKCENTRAL-COM_xOpsDeviceMgmt.Mesh. |  egrep -i \"parameter|value\"",
            "Timeout" : 10
        },
        "ProcessStatus": {
            "Commands": "ps | grep -i opensync; ps | grep -i bm;ps | grep -i sm;ps | grep -i cm;ps | grep -i nm; ps | grep -i ovsm; ps | grep -q \"ovsdb-server\"",
            "Timeout" : 10
        },
        "SSIDStatus": {
            "Commands": "dmcli eRT getv Device.WiFi.SSID.13.Status | grep value; dmcli eRT getv Device.WiFi.SSID.14.Status | grep value",
            "Timeout" : 10
        },
        "SSIDCheck": {
            "Commands": "Radio2=\"$(dmcli eRT getv Device.WiFi.SSID.14.SSID | grep -i \"we.connect.yellowstone\" )\";if [[ -z \"$Radio2\" ]];then echo \"FAILURE: 5Ghz Mesh Backhaul SSID is incorrect\";else echo \"SUCCESS:5G Mesh Backhaul SSID is correct\";fi;Radio1=\"$(dmcli eRT getv Device.WiFi.SSID.13.SSID | grep -i \"we.connect.yellowstone\" )\";if [[ -z \"$Radio1\" ]];then echo \"FAILURE: 2.4Ghz mesh backhaul SSID is incorrect\";else echo \"SUCCESS:2.4Ghz mesh backhaul SSID is correct\";fi;",
            "Timeout" : 10
        },
        "StateTables": {
            "Commands": "(if [[ \"$(ovsh s Wifi_VIF_Config if_name ssid enabled mac_list -T)\" == \"$(ovsh s Wifi_VIF_State if_name ssid enabled mac_list -T)\" ]]; then echo \"Success: ovsh VIF_Config and VIF_State tables are the same.\"; else echo \"Failure: Mismatch is seen between ovsh VIF_Config and VIF_State tables.\"; fi; ovsh s Wifi_VIF_Config if_name ssid enabled mac_list -T;ovsh s Wifi_VIF_State if_name ssid enabled mac_list -T);",
            "Timeout" : 10
        },
        "GRETunnels": {
            "Commands": "echo \"Check if we have gre tunnels created for br106 (backhaul)\";brctl show br106;echo \" If OVS is enabled \";ovs-vsctl list-ifaces br106",
            "Timeout" : 10
        },
        "OpenSync": {
            "Commands": "dmcli eRT getv Device.DeviceInfo.X_RDKCENTRAL-COM_RFC.Feature.OVS.Enable | grep -s -i value;dmcli eRT getv Device.DeviceInfo.X_RDKCENTRAL-COM_xOpsDeviceMgmt.Mesh.Opensync| grep -s -i value",
            "Timeout" : 10
        }
    },
    "MTA": {
        "Provisioning": {
            "Commands": "dmcli eRT getv Device.X_CISCO_COM_MTA.IPAddress | grep value;dmcli eRT getv Device.X_CISCO_COM_MTA.BootFileName | grep value;dmcli eRT getv Device.X_CISCO_COM_MTA.FQDN | grep value",
            "Timeout" : 10
        },
        "LineStatus": {
            "Commands": "dmcli eRT getv Device.X_CISCO_COM_MTA.LineTable.1.Status | grep value;dmcli eRT getv  Device.X_CISCO_COM_MTA.LineTable.2.Status | grep value",
            "Timeout" : 10
        },
        "Registration": {
            "Commands": "dmcli eRT getv Device.X_CISCO_COM_MTA. | grep -i \"Registration failed\"",
            "Timeout" : 30
        }
    },
    "Cujo": {
        "FingerPrintEnable": {
            "Commands": "dmcli eRT getv Device.DeviceInfo.X_RDKCENTRAL-COM_DeviceFingerPrint.Enable | grep -s -i value",
            "Timeout" : 10
        },
        "FingerPrintEndpoint": {
            "Commands": "dmcli eRT getv Device.DeviceInfo.X_RDKCENTRAL-COM_DeviceFingerPrint.EndpointURL | grep -s -i value",
            "Timeout" : 10
        },
        "FingerPrintLogging": {
            "Commands": "dmcli eRT getv Device.DeviceInfo.X_RDKCENTRAL-COM_DeviceFingerPrint.LoggingPeriod | grep -s -i value",
            "Timeout" : 10
        },
        "SafeBrowsing": {
            "Commands": "dmcli eRT getv Device.DeviceInfo.X_RDKCENTRAL-COM_AdvancedSecurity.SafeBrowsing.Enable | grep -s -i value",
            "Timeout" : 10
        },
        "Softflowd": {
            "Commands": "dmcli eRT getv Device.DeviceInfo.X_RDKCENTRAL-COM_AdvancedSecurity.Softflowd.Enable | grep -s -i value",
            "Timeout" : 10
        }
    },
    "XfinityWifi": {
        "Status": {
            "Commands": "dmcli eRT getv Device.DeviceInfo.X_COMCAST_COM_xfinitywifiEnable | grep value",
            "Timeout" : 10
        },
        "DSCPMarkPolicy": {
            "Commands": "dmcli eRT getv Device.X_COMCAST-COM_GRE.Tunnel.1.DSCPMarkPolicy | grep value",
            "Timeout" : 10
        },
        "RemoteEndpoint": {
            "Commands": "dmcli eRT getv Device.X_COMCAST-COM_GRE.Tunnel.1.PrimaryRemoteEndpoint | grep value;dmcli eRT getv Device.X_COMCAST-COM_GRE.Tunnel.1.SecondaryRemoteEndpoint | grep value",
            "Timeout" : 10
        }
    },
    "Cloud":{
        "MeshStatus": {
            "Commands": "echo \"Check connection to Mesh Cloud Controller\"; echo \"ovsh s Manager\"; if [[ -z \"$(ovsh s Manager | grep -i '\"state\",\"ACTIVE\"')\" ]]; then echo \"XDT-Failure: Mesh cloud connection is not established yet.\"; else echo \"XDT-Success: Mesh cloud connection is established successfully.\"; fi; /usr/opensync/tools/ovsh s Manager; echo \"ovsh s AWLAN_Node \"; /usr/opensync/tools/ovsh s AWLAN_Node",
            "Timeout" : 10
        }
    }
}
